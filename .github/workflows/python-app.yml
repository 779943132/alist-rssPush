# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    tags:
      - 'v*.*.*'  # 仅在推送标签符合此模式时触发
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Name of the release'
        required: true
        default: 'Release'
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v1.0.0'


permissions:
  contents: write
  packages: write


jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build on Ubuntu
        run: echo "Building on Ubuntu"
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile rssPush.py
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build on Windows
        run: echo "Building on Windows"
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt  # 安装项目依赖
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile rssPush.py

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build on macOS
        run: echo "Building on macOS"
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile rssPush.py


  release:
    needs: [build-ubuntu, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check if Release Exists
      id: check_release
      run: |
        tag_name=${GITHUB_REF#refs/tags/}
        response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                           -H "Accept: application/vnd.github.v3+json" \
                           "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag_name")
        if echo "$response" | grep "Not Found" > /dev/null; then
          echo "Release does not exist"
          echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
        else
          echo "Release exists"
          echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          echo "RELEASE_ID=$(echo $response | jq -r '.id')" >> $GITHUB_ENV
        fi

    - name: Create or Update Release
      id: create_or_update_release
      run: |
        if [ "$RELEASE_EXISTS" = "true" ]; then
          echo "Updating existing release..."
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{"body": "Updated release"}' \
                        "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
        else
          echo "Creating new release..."
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                       -H "Accept: application/vnd.github.v3+json" \
                       -d '{"tag_name": "${GITHUB_REF#refs/tags/}", "name": "Release ${GITHUB_REF#refs/tags/}", "draft": false, "prerelease": false}' \
                       "https://api.github.com/repos/${{ github.repository }}/releases"
        fi

    - name: Upload Ubuntu artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/work/alist-rssPush/alist-rssPush/dist/rssPush
        asset_name: rssPush-debian
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: D:\a\alist-rssPush\alist-rssPush\dist\rssPush.exe
        asset_name: rssPush-windows.exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /Users/runner/work/alist-rssPush/alist-rssPush/dist/rssPush
        asset_name: rssPush-macos
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
